<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gold Collector Game</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: url('mine-background.jpg') no-repeat center center fixed;
      background-size: cover;
    }

    #basket {
      position: absolute;
      bottom: 10px;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 50px;
      background-color: #ffd700;
    }

    .gold, .bomb, .diamond {
      position: absolute;
    }

    .gold {
      background-color: #ffd700;
    }

    .bomb {
      background-color: #ff0000;
    }

    .diamond {
      background-color: #00f;
      width: 40px;
      height: 40px;
    }

    #scoreboard {
      position: fixed;
      top: 10px;
      right: 10px;
      font-size: 18px;
      color: #000;
    }

    #timer {
      position: fixed;
      top: 10px;
      left: 10px;
      font-size: 18px;
      color: #000;
    }

    #game-over {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      display: none;
      color: #fff;
    }

    #retry-button {
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>

<div id="basket"></div>
<div id="scoreboard">Score: 0</div>
<div id="timer">Time: 60s</div>

<audio id="collect-sound" src="collect.mp3"></audio>
<audio id="bomb-sound" src="bomb.mp3"></audio>
<audio id="diamond-sound" src="diamond.mp3"></audio>
<audio id="game-over-sound" src="game-over.mp3"></audio>
<audio id="background-music" loop autoplay src="background-music.mp3"></audio>

<div id="game-over">
  <h1>You Lose!</h1>
  <button id="retry-button" onclick="resetGame()">Retry</button>
</div>

<script>
  const basket = document.getElementById('basket');
  const scoreboard = document.getElementById('scoreboard');
  const timerDisplay = document.getElementById('timer');
  const gameOverScreen = document.getElementById('game-over');
  const collectSound = document.getElementById('collect-sound');
  const bombSound = document.getElementById('bomb-sound');
  const diamondSound = document.getElementById('diamond-sound');
  const gameOverSound = document.getElementById('game-over-sound');
  const backgroundMusic = document.getElementById('background-music');

  let basketPosition = 50; // Initial position
  let score = 0;
  let timer = 60;
  let isGameOver = false;

  document.addEventListener('keydown', (event) => {
    if (!isGameOver) {
      if (event.key === 'ArrowLeft' && basketPosition > 0) {
        basketPosition -= 10;
      } else if (event.key === 'ArrowRight' && basketPosition < window.innerWidth - 50) {
        basketPosition += 10;
      }

      updateBasketPosition();
    }
  });

  function updateBasketPosition() {
    basket.style.left = `${basketPosition}px`;
  }

  function createGold() {
    const gold = document.createElement('div');
    gold.className = 'gold';
    gold.style.width = `${10 + Math.random() * 20}px`; // Random width
    gold.style.height = gold.style.width;
    gold.style.left = `${Math.random() * (window.innerWidth - parseInt(gold.style.width))}px`;
    document.body.appendChild(gold);

    const fallSpeed = 1 + Math.random() * 3; // Random speed

    function fall() {
      if (!isGameOver) {
        const top = gold.offsetTop + fallSpeed;
        gold.style.top = `${top}px`;

        if (top < window.innerHeight) {
          requestAnimationFrame(fall);
        } else {
          gold.remove(); // Remove gold when it goes beyond the screen
        }

        // Check for collision with the basket
        if (
          top + parseInt(gold.style.width) >= window.innerHeight - 50 && // Basket height is 50px
          gold.offsetLeft >= basketPosition &&
          gold.offsetLeft + parseInt(gold.style.width) <= basketPosition + 50
        ) {
          gold.remove(); // Remove gold when collected
          const goldPoints = Math.round(parseInt(gold.style.width)); // Points based on the size of gold
          score += goldPoints;
          updateScore();
          playCollectSound();
          playCollectEffect(gold);
        }
      }
    }

    requestAnimationFrame(fall);
  }

  function playCollectSound() {
    collectSound.play();
  }

  function playCollectEffect(gold) {
    const effect = document.createElement('div');
    effect.className = 'collect-effect';
    effect.style.left = `${basketPosition + 25}px`;
    effect.style.top = `${window.innerHeight - 50}px`;
    document.body.appendChild(effect);

    setTimeout(() => {
      effect.remove();
    }, 1000);
  }

  function createBomb() {
    const bomb = document.createElement('div');
    bomb.className = 'bomb';
    bomb.style.width = '20px';
    bomb.style.height = '20px';
    bomb.style.left = `${Math.random() * (window.innerWidth - 20)}px`;
    document.body.appendChild(bomb);

    const fallSpeed = 2 + Math.random() * 4; // Faster fall speed for bombs

    function fall() {
      if (!isGameOver) {
        const top = bomb.offsetTop + fallSpeed;
        bomb.style.top = `${top}px`;

        if (top < window.innerHeight) {
          requestAnimationFrame(fall);
        } else {
          bomb.remove(); // Remove bomb when it goes beyond the screen
        }

        // Check for collision with the basket
        if (
          top + 20 >= window.innerHeight - 50 && // Basket height is 50px
          bomb.offsetLeft >= basketPosition &&
          bomb.offsetLeft + 20 <= basketPosition + 50
        ) {
          bomb.remove(); // Remove bomb when collected
          score -= 10; // Reduce score for hitting a bomb
          updateScore();

          // Check if the score goes negative
          if (score < 0) {
            endGame();
          }
        }
      }
    }

    requestAnimationFrame(fall);
  }

  function createDiamond() {
    const diamond = document.createElement('div');
    diamond.className = 'diamond';
    diamond.style.left = `${Math.random() * (window.innerWidth - 40)}px`;
    document.body.appendChild(diamond);

    const fallSpeed = 1.5
